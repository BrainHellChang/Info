
27. 오버로딩 / 오버라이딩
오버로딩(Overloading) : 같은 이름의 메서드 여러개를 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술
오버라이딩(Overriding) : 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의해서 사용
28. 객체지향 언어 특징
캡슐화 / 정보은닉 / 추상화 / 상속성 / 다형성
[
캡슐화 : 함수를 하나로 묶는 것으로 캡슐화 된 객체의 세부 내용이 외부에 은폐(정보 은닉)
	되어, 변경이 발생해도 오류 파급효과가 적음, 캡슐화된 객체들은 재사용 용이
정보은닉 : 다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통해 접근 허용
추상화 : 불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만
	중점을 두어 개략화 / 모델화 하는 것
상속성 : 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것
다형성 : 클래스가 연산을 수행하게 될 때 각 객체(클래스)가 가지고 있는
	고유한 방법으로 응답(동일 메소드 사용)
]

29. 상속과 구현의 차이
상속 - 부모의 특징을 상속 받아 코드의 재사용성을 높이고 코드 중복을 최소화
구현 - 인터페이스를 클래스에서 구현한다는 것을 의미 / 인터페이스에서 정의한 메서드에 강제력이 생김으로써
	해당 인터페이스를 구현한 클래스에서는 인터페이스 메서드를 재정의함으로써 구현해야함
[ 클래스 다중 상속은 불가능 하지만 인터페이스 다중 상속은 가능합니다.  ]


30. 조인 종류
[
inner join - 두개의 테이블에 중복되는 데이터를 반환 (교집합)
LEFT OUTER JOIN - 각 테이블의 중복되는 값과, A 테이블에만 있는 값을 가져옴
FULL OUTER JOIN - 각 테이블에 들어있는 모든 값을 반환 ( 매칭되는 데이터 없으면 null)
]

31. 자바란 무엇인가 ( 자바 구동원리 / JVM 특징 )
자바 프로그램은 운영체제나 하드웨어에 의존하지 않는 바이트 코드(중간 언어)인 추상적인 코드로 구현된다
. 따라서, 자바 프로그램을 실행하기 위해서는 자바 가상 머신(JVM)과 개발에 필요한 표준 라이브러리 세트와
 컴파일러의 환경만 맞추면 자바 프로그램은 모든 환경에서 동일하게 동작한다. 이러한 실행환경과 개발환경을
 제공하는 것이 자바 플랫폼이다."
[
(1)객체지향프로그래밍 언어 (그로인해 유지보수가 쉽고 직관적인 코드 분석이 가능하다.)
(2) 분산 네트워크 기술 지원 (자바에는 TCP/IP 라이브러리가 기본적으로 포함되어있고, HTTP 프로토콜을 지원.)
(3) 멀티쓰레딩 지원 (사용자 인터페이스 쓰레드와 장시간 계산이 필요한 쓰레드가 동시에 필요할 때 효과적이다.)
(4) 이식성이 높다 (자바가상머신(JVM)에서 작동하기 때문에 운영체제 (ex. Window, Linux)의 종류에 상관없이 작동한다.)
(5) 자동메모리 관리 (사용하지 않는 객체는 자동으로 메모리에서 체크하고 반환해준다.)
(6) 동적 로딩 지원 (프로그램 실행시 모든 클래스가 로딩되지 않고, 필요한 시점에 클래스를 로딩하여 사용할 수 있다.)

자바 구동 원리
소스코드를 작성 (.java 확장자의 소스 파일)
컴파일러(javac.exe)가 바이트코드로 변환한다. (.class 확장자의 클래스 파일)
런처(java.exe)로 자바 가상 머신을 구동시킨다.
자바 가상 머신(JVM)이 바이트코드를 해석하여 자바 프로그램이 실행된다.

JVM 이란 Java Virtual Machine의 약자입니다.
말그대로 자바를 실행하기 위한 가상 기계이고,
자바 프로그램을 실행시키기 위해서 반드시 필요한 요소입니다.
]

32. 기본형 변수 / 참조형 변수
boolean / char / byte shor int long / float double (null x, 산술 연산 가능)
Integer Boolean String ... 그 외 (null o ,산술 연산 x)

33. static  ( 공유, 메모리)
정적 멤버(클래스 멤버)는 객체에 소속된 멤버가 아니라 클래스에 고정된 멤버이기 때문에
클래스를 로딩이 끝나는 즉시 바로 사용 가능
(Heap 영역(객체)이 아닌 Static 영역(클래스)에 생성)

34. 익명 클래스와 익명객체
- 한 번만 객체로 만드는데 사용되는 클래스를 정의하지 않아서 new 로 생성 못함

35. 쓰레드가 무엇이고 언제쓰는가 / 프로세서와 쓰레드 차이
프로세서 - 현재 실행 중인 프로그램 ( 메모리 할당 받아서 실행중)
	< 구성 요소 : 자원(데이터,메모리), 스레드 >
쓰레드 - 프로세스 내에서 실제로 작업을 수행하는 주체
	모든 프로세스는 한 개 이상의 쓰레드 존재 (두 개이상 - 멀티 쓰레드)
	< 특징 : cpu 사용률 향상, 효율적인 자원 사용, 응답성 향상 >

36. 제네릭
클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 타입을 지정하는 것

37. http 프로토콜(Hypertext Transfer Protocol) - 링크 기반 데이터 접속
인터넷 상에서 데이터를 주고받기 위한 서버/클라이언트 모델을 따르는 프로토콜
애플리케이션 레벨의 프로토콜로 TCP/IP 위에서 작동

38. 스프링이 무엇인가
JAVA의 기술을 쉽게 사용할 수 있게 하는 오픈소스 웹 프레임워크, 
< 프레임워크 : 자주쓰일만한 기능들을 모아놓은 유틸(클래스)들의 모음
39. session 과 cookie 차이
특징 : HTTP 프로토콜의 약점을 보완하기 위해 사용
	HTTP 프로토콜 환경은 connectionless(요청 응답 완료 시 연결 끊김) , 
	stateless(통신 끝나면 상태 유지 x) 한 특성을 가지기 때문에
	서버는 클라이언트가 누구인지 매번 확인 해야한다는 단점이있음
세션 : 사용자 정보를 서버측에서 관리
	서버에서 클라이언트에게 세션을 부여하여 웹브라우저가 종료될 때 까지 (서버 접속) 인증상태 유지
쿠키 : 클라이언트 로컬에 저장되는 키, 값이 들어있는 파일
	브라우저가 종료되어도 인증 유지


40. 자바스크립트 / 스크립트언어가 뭐게
스크립트 언어 : 소스코드를 컴파일 하지 않고도 실행할 수 있는 프로그래밍 언어
- 번역 과정을 거쳐야 하기 때문에 느림
자바스크립트 : HTML 과 CSS 로 만들어진 웹 페이지(브라우저)를 동적으로 변경해주는 언어

41. 제이쿼리란? 제이쿼리 특징 / 제이쿼리 셀렉터
제이쿼리 :HTML의 DOM 조작과 이벤트 제어, 애니메이션 그리고 Ajax까지 웹 화면을 다루는 자바스크립트 라이브러리입니다. 
(적게쓰고 많이쓰자)
제이쿼리 셀렉터 : $("*") / $(".") / $("#") / $("element") / $("selector1, selector2,..")
:first-child / :last-of-type / only-child...

42. Ajax 가 무엇인가 ( Asynchronous Javascript And Xml - 비동기식 자바스크립트 xml)
자바스크립트를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술
( 브라우저가 가지고있는 XMLHttpRequest 객체를 이용하여 전체 페이지를 새로 고치지 않고도
페이지의 일부만을 위한 데이터 로드 기법)
( 동기방식 -> 코드가 순차적으로 진행 / 비동기방식 -> ajax 를 통해 코드 사이에 필요한 데이터 삽입 )

43. JSP 란 -> JAVA Server Pages
HTML 페이지는 서버에 저장된 데이터를 제어할 수 없지만
JSP 페이지는 서버에서 실행되는 페이지라서 접근 가능
-> 답변(response)을 만들기 위해 요청(request)을 처리하는 텍스트 기반 문서 

44. 프로젝트질문
45. 형상관리 해봄? SVN GIT -> GIT 해봄 ㅇㅇ

46. 추상클래스 / 인터페이스 차이
추상메서드 : 내용이 없는 메서드, 구현(정의)는 하지 않고 선언만 한 메서드
	< 목적 : 메서드 내용이 너무 일반적이어서 부모 클래스에서 구체화하여 정의할 필요가 없어서
		추상메서드로 선언만하고 상속받은 자식 클래스에서 재정의하도록 할 때 사용

추상클래스 (미완성 설계도) : 추상메서드를 선언하여 상속을 통해 자손클래스에서 완성되도록 유도
	상속을 위한 클래스이기 때문에 객체를 생성할 수 없음
인터페이스(기본 설계도) : 추상클래스처럼 다른 클래스를 작성하는데 도움을 주는 목적이지만
	클래스와 다르게 다중상속(구현)이 가능함
차이점 -> 자바의 특성상 한개의 클래스만 상속이 가능하여 클래스의 구분을 추상 클래스 상속을 통해 해결하고
	기능들을 인터페이스로 구현
[
일반클래스 : 명확한 객체 (최가준, 양윤석, 김혜은)
추상클래스 : 일반적인 객체 (사람 , 생명체)
인터페이스 : 기능 (말하기, 술먹기, 코딩하기) 
]
47. ArrayList(List 상속받음) 와 Vector 차이 
< 둘 다 크기가 동적인 배열 >
ArrayList(클래스) -> List(인터페이스) -> Collection(콜렉션)
ArrayList(java.util) : 객체가 추가되어 용량을 초과하면 자동으로 용량 늘어남(조작이 많이 필요할 때 유용) ( 다소 느림 )
Vector : 정수 인덱스를 이용하여 배열에 엑세스 가능 -> 동기화 되어있어서 한 번에 하나의 쓰레드만 벡터 호출가능

48. JUnit : 자바 단위 테스트 코드? 모르겠음

49. 서브클래스에서 오버라이딩을 못하게 하려면 어떻게 해야함?
	final 로 선언하면 재정의를 막을 수 있음
[
final 특징
클래스 : 상속 자체가 안됨
메서드 : 상속받은 클래스에서 오버라이드 불가능
변수 : 초기화된 변수는 변경할 수 없는 상수가 됨
]

50. 반응형 웹 써봄? 부트스트랩 써봄? ㅇㅅㅇ

51. String 은 클래스인가
String(java.lang) 클래스에는 다양한 메서드 있음 + 문자열 결합을 하면 인스턴스가 새로 생성됨


---------------------- DB 질문
52. 인덱스가 필요한 컬럼은 어떤 컬럼입니까?
인덱스는 테이블의 동작 속도를 높여주는 자료구조
ex) 책 뒷 편에 '색인' 이 바로 인덱스의 역할 -> 키워드를 동해 페이지 이동가능
DB인덱스도 DB메모리에 일정 공간을 사용해 저장이 되고 데이터를 조회할 때 소모되는 메모리를 효율적으로 사용
( 인덱스를 잘 설정 했다면 ㅇㅇ)
< 특징 : (1) WHERE 절에서 효과가 있다 -> '학생'테이블에 '학번' '이름' '전번' 있을 때 인덱스는 '학번' '전번' 에 걸려있음
	SELECT * FROM '학생' WHERE '학번' = 1; 의 성능 향상
	(2) 조회시 자주 사용하고 / 고유한 값 위주로 인덱스 설정
	(3) SELECT 구문에서만 쓰시길...
	(4) 4가지 기준을 사용하여 인덱스 설정하기 -> 카디널리티(높을수록) / 선택도(낮을수록) / 활용도(높을수록) / 중복도(없을수록)
	


53. 백업 스케줄링 해봄? ...

54. SGA의 구조 설명 
자바쌤도 모름

55. DB buffer cache size 조절하는 Parameter 
ㄷㅊ

56. PK 와 FK (AK) 에 대해 설명하셈
PK : 중복 / NULL 방지 ( 주 식별자 키 )
FK : 외부 식별자 키 -> 테이블 간의 관계 의미 ( 접점이 되는 컬럼을 FK 로 지정하여 서로 참조 할 수 있음 )


57. 제약조건 설명 ㄱ
제약조건 -> 테이블 단위에서 데이터 무결성 보장하는 규칙
UNIQUE
NOT NULL 
CHECK - 행에 입력될 데이터 조건

58. 오라클 설치시 문제점 및 까다로웠던 점
구글이 앎

59. 테이블 스페이스에 관해 얘기
구글 ㄱ

60. 인덱스 장단점
장점 : DB 데이터를 빠르게 찾을 수 있다.
단점 : SELECT 를 제외한 동작에서는 성능 저하가 일어날 수 있다.
	추가 저장 공간이 필요하다.
	인덱스를 관리하는 공수가 필요하다 (인력과 시간)

61. 시퀀스와 캐쉬?


62. SELECT SS FROM TABLE WHERE A=A 와 같은 구분의 처리 순서는?

63. 정규화 설명
중복 데이터를 저장하면서 일으키는 문제를 없애려고 정보를 주제별로 분할하는 방식
테이블 간에 중복된 데이터를 허용하지 않기 위함
1 정규화 -> 컬럼 -> 데이터 1:1
2 정규화 ->



---------------------- 자료구조
스택 : LIFO
큐 : FIFO
힙 : 완전이진트리 ( 큐를 위해 만들어진 자료구조 ) O(logN)

트리 종류
(1) 이진트리(Binary Tree) -> 자식 노드가 두개까지 붙을 수 있음
(2) 이진탐색트리(Binary Search Tree) -> 2진 트리에서 현재 노드에서 작은 값은 왼쪽 / 큰 값은 오른쪽
(3) 완전이진트리(Perfect Binary Tree) -> 왼쪽부터 채워진 2진 트리
(4) 

빠른 순
logN > N > NlogN > N^2 > N^3 > 2^N > N!

1) 리스트(List) - 검색이 잦은 경우 Array List가 적합합니다. Linked List는 순차적으로 검색하여 찾지만 Array List는 인덱스를 통해 바로 접근할 수 있기 때문입니다.
Linked List - 검색O(n) / 삽입,삭제O(1)
ArrayList - 검색O(1) / 삽입,삭제O(n)

2) 힙(Heap) - 힙은 완전이진트리로 수의 집합에서 가장 작은 수 혹은 가장 큰 수와 같이 우선순위가 높은 데이터를 쉽게 꺼내기 위한 우선순위 큐를 구현한 자료구조
O(log N)


============= 정렬 https://doodreamcode.tistory.com/52
선택 정렬 O(n^2)
삽입 정렬 O(n^2) -> O(n) (정렬이 되어있는 경우)
퀵 정렬 O(N^2) -> O(nlogn)  
